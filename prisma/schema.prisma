generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator json {
  provider = "prisma-json-types-generator"
}
model Language {
  id                   String                @id @db.VarChar(10)
  name                 String
  UserTranslations     UserTranslation[]
  ProductTranslations  ProductTranslation[]
  CategoryTranslations CategoryTranslation[]
  BrandTranslations    BrandTranslation[]

  createdById Int?
  createdBy   User? @relation("LanguageCreatedBy", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy   User? @relation("LanguageUpdatedBy", fields: [updatedById], references: [id])

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model User {
  id                          Int                   @id @default(autoincrement())
  email                       String
  name                        String                @db.VarChar(500)
  password                    String                @db.VarChar(500)
  phoneNumber                 String                @db.VarChar(50)
  avatar                      String?               @db.VarChar(1000)
  totpSecret                  String?               @db.VarChar(1000)
  status                      UserStatus            @default(INACTIVE)
  roleId                      Int
  role                        Role                  @relation(fields: [roleId], references: [id], onDelete: NoAction)
  refreshTokens               RefreshToken[]
  carts                       CartItem[]
  orders                      Order[]
  reviews                     Review[]
  createdPermissions          Permission[]          @relation("PermissionCreatedBy")
  updatedPermissions          Permission[]          @relation("PermissionUpdatedBy")
  createdRoles                Role[]                @relation("RoleCreatedBy")
  updatedRoles                Role[]                @relation("RoleUpdatedBy")
  deletedRoles                Role[]                @relation("RoleDeletedBy")
  createProducts              Product[]             @relation("ProductCreatedBy")
  updateProducts              Product[]             @relation("ProductUpdatedBy")
  createdCategories           Category[]            @relation("CategoryCreatedBy")
  updatedCategories           Category[]            @relation("CategoryUpdatedBy")
  createdSKUS                 SKU[]                 @relation("SKUCreatedBy")
  updatedSKUS                 SKU[]                 @relation("SKUUpdatedBy")
  createdLanguages            Language[]            @relation("LanguageCreatedBy")
  updatedLanguages            Language[]            @relation("LanguageUpdatedBy")
  createdBrands               Brand[]               @relation("BrandCreatedBy")
  updatedBrands               Brand[]               @relation("BrandUpdatedBy")
  createdProductTranslations  ProductTranslation[]  @relation("ProductTranslationCreatedBy")
  updatedProductTranslations  ProductTranslation[]  @relation("ProductTranslationUpdatedBy")
  createdCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationCreatedBy")
  updatedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationUpdatedBy")
  createdBrandTranslations    BrandTranslation[]    @relation("BrandTranslationCreatedBy")
  updatedBrandTrans           BrandTranslation[]    @relation("BrandTranslationUpdatedBy")
  createdOrders               Order[]               @relation("OrderCreatedBy")
  updatedOrders               Order[]               @relation("OrderUpdatedBy")
  deletedOrders               Order[]               @relation("OrderDeletedBy")
  createdUserTranslations     UserTranslation[]     @relation("UserTranslationCreatedBy")
  updatedUserTranslations     UserTranslation[]     @relation("UserTranslationUpdatedBy")
  userTranslations            UserTranslation[]     @relation("User")
  sendMessages                Message[]             @relation("FromUser")
  receivedMessages            Message[]             @relation("ToUser")
  soldOrders Order[] @relation("Shop")

  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?    @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[]   @relation("UpdatorUsers")
  devives      Device[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model UserTranslation {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation("User", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  languageId  String
  language    Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  address     String?  @db.VarChar(500)
  description String?

  createdById Int?
  createdBy   User?     @relation("UserTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?     @relation("UserTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model VerificationCode {
  id        Int                  @id @default(autoincrement())
  email     String               @db.VarChar(500)
  code      String               @db.VarChar(50)
  type      VerificationCodeType
  expiresAt DateTime
  createdAt DateTime             @default(now())

  @@unique([email, type, code])
  @@index([expiresAt])
}

model Device {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userAgent     String
  ip            String
  lastActive    DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true)
  refreshTokens RefreshToken[]
}

model RefreshToken {
  token     String   @unique @db.VarChar(1000)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())
  deviceId  Int
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expiresAt])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  module      String     @default("") @db.VarChar(500)
  roles       Role[]

  createdById Int?
  createdBy   User? @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(500)
  description String       @default("")
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  createdById Int?
  createdBy   User?     @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?     @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User?     @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model Product {
  id                  Int                  @id @default(autoincrement())
  name String @db.VarChar(500)
  publishedAt DateTime?
  base_price          Float
  virtual_price       Float
  brandId             Int
  brand               Brand                @relation(fields: [brandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  images              String[]
  categories          Category[]
  /// [Variants]
  variants Json
  skus                SKU[]
  reviews             Review[]
  productTranslations ProductTranslation[]
  productSKUSnapshots ProductSKUSnapshot[]
  orders Order[]
  createdById         Int
  createdBy           User               @relation("ProductCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedById         Int?
  updatedBy           User?                @relation("ProductUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model ProductTranslation {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  languageId  String
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  name        String    @db.VarChar(500)
  description String
  createdById Int?
  createdBy   User?     @relation("ProductTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?     @relation("ProductTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
  @@index([productId])
}

model Category {
  id                   Int                   @id @default(autoincrement())
  products             Product[]
  name String @db.VarChar(500)
  logo String? @db.VarChar(1000)
  parentCategoryId     Int?
  parentCategory       Category?             @relation("ParentCategoryCategories", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childrenCategories   Category[]            @relation("ParentCategoryCategories")
  categoryTranslations CategoryTranslation[]
  createdById          Int?
  createdBy            User?                 @relation("CategoryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById          Int?
  updatedBy            User?                 @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@index([deletedAt])
}

model CategoryTranslation {
  id          Int       @id @default(autoincrement())
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  languageId  String
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  name        String    @db.VarChar(500)
  description String
  createdById Int?
  createdBy   User?     @relation("CategoryTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?     @relation("CategoryTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}



model SKU {
  id                  Int                  @id @default(autoincrement())
  value               String               @db.VarChar(500)
  price               Float
  stock               Int
  image           String
  productId           Int
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cartItems           CartItem[]
  productSKUSnapshots ProductSKUSnapshot[]
  createdById         Int
  createdBy           User               @relation("SKUCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedById         Int?
  updatedBy           User?                @relation("SKUUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([deletedAt])
  @@index([productId])
}

model Brand {
  id                Int                @id @default(autoincrement())
  logo              String             @db.VarChar(1000)
  products          Product[]
  name              String             @db.VarChar(500)
  brandTranslations BrandTranslation[]
  createdById       Int?
  createdBy         User?              @relation("BrandCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById       Int?
  updatedBy         User?              @relation("BrandUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([deletedAt])
}

model BrandTranslation {
  id          Int       @id @default(autoincrement())
  brandId     Int
  brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  languageId  String
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  name        String    @db.VarChar(500)
  description String
  createdById Int?
  createdBy   User?     @relation("BrandTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?     @relation("BrandTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  skuId     Int
  sku       SKU      @relation(fields: [skuId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   @@index([userId])
   @@unique([userId,skuId])
}

model ProductSKUSnapshot {
  id          Int      @id @default(autoincrement())
  productName String   @db.VarChar(500)
  skuPrice       Float
  image     String
  skuValue    String   @db.VarChar(500)
  skuId       Int?
  sku         SKU?     @relation(fields: [skuId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  orderId     Int?
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  quantity Int
  productId Int?
  product       Product?   @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  /// [ProductTranslations]
  productTranslations Json
  createdAt   DateTime @default(now())
}

model Order {
  id          Int                  @id @default(autoincrement())
  userId      Int
  user        User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status      OrderStatus
  items       ProductSKUSnapshot[]
  products Product[]
  /// [Receiver]
  receiver Json
  shopId Int?
  shop   User?                @relation("Shop", fields: [shopId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdById Int?
  createdBy   User?                @relation("OrderCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?                @relation("OrderUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User?                @relation("OrderDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@index([deletedAt])
  @@index([status,deletedAt])
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentTransaction {
  id                 Int      @id @default(autoincrement())
  gateWay            String   @db.VarChar(100)
  transactionDate    DateTime @default(now())
  accountNumber      String   @db.VarChar(100)
  subAccount         String?  @db.VarChar(250)
  amountIn           Int      @default(0)
  amountOut          Int      @default(0)
  accumulated        Int      @default(0)
  code               String?  @db.VarChar(250)
  transactionContent String?  @db.Text
  referenceNumber    String?  @db.VarChar(250)
  body               String?  @db.Text
  createdAt          DateTime @default(now())
}

model Message {
  id         Int       @id @default(autoincrement())
  fromUserId Int
  fromUser   User      @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toUserId   Int
  toUser     User      @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  content    String
  readAt     DateTime?
  createdAt  DateTime  @default(now())
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_PICKUP
  PENDING_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  LOGIN
  DISABLE_2FA
}

enum UserStatus {
  ACTIVE
  BLOCKED
  INACTIVE
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}
